// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type PreGoAccUserTwoFactor9999TwoFactorAuthType string

const (
	PreGoAccUserTwoFactor9999TwoFactorAuthTypeSMS   PreGoAccUserTwoFactor9999TwoFactorAuthType = "SMS"
	PreGoAccUserTwoFactor9999TwoFactorAuthTypeEMAIL PreGoAccUserTwoFactor9999TwoFactorAuthType = "EMAIL"
	PreGoAccUserTwoFactor9999TwoFactorAuthTypeAPP   PreGoAccUserTwoFactor9999TwoFactorAuthType = "APP"
)

func (e *PreGoAccUserTwoFactor9999TwoFactorAuthType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreGoAccUserTwoFactor9999TwoFactorAuthType(s)
	case string:
		*e = PreGoAccUserTwoFactor9999TwoFactorAuthType(s)
	default:
		return fmt.Errorf("unsupported scan type for PreGoAccUserTwoFactor9999TwoFactorAuthType: %T", src)
	}
	return nil
}

type NullPreGoAccUserTwoFactor9999TwoFactorAuthType struct {
	PreGoAccUserTwoFactor9999TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
	Valid                                      bool // Valid is true if PreGoAccUserTwoFactor9999TwoFactorAuthType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreGoAccUserTwoFactor9999TwoFactorAuthType) Scan(value interface{}) error {
	if value == nil {
		ns.PreGoAccUserTwoFactor9999TwoFactorAuthType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreGoAccUserTwoFactor9999TwoFactorAuthType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreGoAccUserTwoFactor9999TwoFactorAuthType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreGoAccUserTwoFactor9999TwoFactorAuthType), nil
}

// pre_go_acc_user_base_9999
type PreGoAccUserBase9999 struct {
	UserID         int32
	UserAccount    string
	UserPassword   string
	UserSalt       string
	UserLoginTime  sql.NullTime
	UserLogoutTime sql.NullTime
	UserLoginIp    sql.NullString
	UserCreatedAt  sql.NullTime
	UserUpdatedAt  sql.NullTime
	// authentication is enable for the userbase
	IsTwoFactorEnabled sql.NullInt32
}

// pre_go_acc_user_9999
type PreGoAccUserInfo9999 struct {
	// User ID
	UserID       uint64
	UserAccount  string
	UserNickname sql.NullString
	UserAvatar   sql.NullString
	UserState    uint8
	UserMobile   sql.NullString
	UserGender   sql.NullInt16
	UserBirthday sql.NullTime
	UserEmail    sql.NullString
	// Authentication status: 0-not, 1-pending,2-authen
	UserIsAuthencation uint8
	// record creation time
	CreatedAt sql.NullTime
	// record update time
	UpdatedAt sql.NullTime
}

// pre_go_acc_user_two_factor_9999
type PreGoAccUserTwoFactor9999 struct {
	TwoFactorID         uint32
	UserID              uint32
	TwoFactorAuthType   PreGoAccUserTwoFactor9999TwoFactorAuthType
	TwoFactorAuthSecret string
	TwoFactorPhone      sql.NullString
	TwoFactorEmail      sql.NullString
	TwoFactorIsActive   bool
	TwoFactorCreatedAt  sql.NullTime
	TwoFactorUpdatedAt  sql.NullTime
}

// account_user_verify
type PreGoAccUserVerify9999 struct {
	VerifyID        int32
	VerifyOtp       string
	VerifyKey       string
	VerifyKeyHash   string
	VerifyType      sql.NullInt32
	IsVerified      sql.NullInt32
	IsDeleted       sql.NullInt32
	VerifyCreatedAt sql.NullTime
	VerifyUpdatedAt sql.NullTime
}
