// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 0005_post.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createPost = `-- name: CreatePost :execresult
INSERT INTO post (title, image_paths, user_id, created_at, updated_at, user_nickname, privacy)
VALUES (?, ?, ?, NOW(), NOW(), ?, ?)
`

type CreatePostParams struct {
	Title        string
	ImagePaths   json.RawMessage
	UserID       uint64
	UserNickname string
	Privacy      PostPrivacy
}

// Create a new post
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.Title,
		arg.ImagePaths,
		arg.UserID,
		arg.UserNickname,
		arg.Privacy,
	)
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM post
WHERE id = ?
`

// Delete a post
func (q *Queries) DeletePost(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllpost = `-- name: GetAllpost :many
SELECT p.id, p.user_id, p.title, p.image_paths, p.user_nickname, p.created_at, p.updated_at, p.privacy, p.metadata
FROM post p
left join user_follows uf 
on p.user_id = uf.following_id
WHERE uf.follower_id =?
order by p.created_at desc
`

// Get all post
func (q *Queries) GetAllpost(ctx context.Context, followerID sql.NullInt64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllpost, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.ImagePaths,
			&i.UserNickname,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Privacy,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT 
    id, 
    title, 
    COALESCE(image_paths, '[]') AS image_paths,  -- tránh NULL trả về
    user_nickname, 
    created_at, 
    updated_at
FROM post
WHERE id = ?
`

type GetPostByIdRow struct {
	ID           uint64
	Title        string
	ImagePaths   json.RawMessage
	UserNickname string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

// Get post by ID
func (q *Queries) GetPostById(ctx context.Context, id uint64) (GetPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImagePaths,
		&i.UserNickname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTimelineByUserId = `-- name: GetTimelineByUserId :many
SELECT 
  p.id, 
  p.user_id, 
  p.title, 
  p.image_paths, 
  p.user_nickname, 
  p.created_at, 
  p.updated_at, 
  p.privacy, 
  COALESCE(p.metadata, JSON_OBJECT()) AS metadata
FROM post p
left JOIN user_follows uf
  ON uf.follower_id = ?
 AND uf.following_id = p.user_id
WHERE 
  p.user_id = ?
  OR p.privacy = 'public' 
  OR (p.privacy = 'friends' AND uf.is_friend = TRUE)
ORDER BY p.created_at DESC
`

type GetTimelineByUserIdParams struct {
	FollowerID sql.NullInt64
	UserID     uint64
}

func (q *Queries) GetTimelineByUserId(ctx context.Context, arg GetTimelineByUserIdParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getTimelineByUserId, arg.FollowerID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.ImagePaths,
			&i.UserNickname,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Privacy,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getpostByUserId = `-- name: GetpostByUserId :many
SELECT 
    id, 
    title, 
    COALESCE(image_paths, '[]') AS image_paths,  -- Tránh NULL trả về
    user_id, 
    created_at, 
    updated_at
FROM post
WHERE user_id = ?
`

type GetpostByUserIdRow struct {
	ID         uint64
	Title      string
	ImagePaths json.RawMessage
	UserID     uint64
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

// Get post by user ID
func (q *Queries) GetpostByUserId(ctx context.Context, userID uint64) ([]GetpostByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getpostByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetpostByUserIdRow
	for rows.Next() {
		var i GetpostByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ImagePaths,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :execresult
UPDATE post
SET title = ?, image_paths = ?, updated_at = NOW()
WHERE id = ?
`

type UpdatePostParams struct {
	Title      string
	ImagePaths json.RawMessage
	ID         uint64
}

// Update a post
func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePost, arg.Title, arg.ImagePaths, arg.ID)
}
