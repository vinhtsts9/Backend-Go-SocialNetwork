// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0010_messages.sql

package database

import (
	"context"
	"database/sql"
)

const getChatHistory = `-- name: GetChatHistory :many
select user_nickname, message_context, message_type, is_pinned, created_at from messages
where room_id = ? order by created_at asc
`

type GetChatHistoryRow struct {
	UserNickname   string
	MessageContext sql.NullString
	MessageType    MessagesMessageType
	IsPinned       sql.NullBool
	CreatedAt      sql.NullTime
}

func (q *Queries) GetChatHistory(ctx context.Context, roomID sql.NullInt32) ([]GetChatHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatHistory, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatHistoryRow
	for rows.Next() {
		var i GetChatHistoryRow
		if err := rows.Scan(
			&i.UserNickname,
			&i.MessageContext,
			&i.MessageType,
			&i.IsPinned,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setChatHistory = `-- name: SetChatHistory :exec
insert into messages(user_nickname, message_context, message_type,room_id) values (?,?,?,?)
`

type SetChatHistoryParams struct {
	UserNickname   string
	MessageContext sql.NullString
	MessageType    MessagesMessageType
	RoomID         sql.NullInt32
}

func (q *Queries) SetChatHistory(ctx context.Context, arg SetChatHistoryParams) error {
	_, err := q.db.ExecContext(ctx, setChatHistory,
		arg.UserNickname,
		arg.MessageContext,
		arg.MessageType,
		arg.RoomID,
	)
	return err
}
