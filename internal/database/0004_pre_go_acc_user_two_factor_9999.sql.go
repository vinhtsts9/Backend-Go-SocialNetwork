// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0004_pre_go_acc_user_two_factor_9999.sql

package database

import (
	"context"
	"database/sql"
)

const addOrUpdateEmail = `-- name: AddOrUpdateEmail :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (user_id, two_factor_email, two_factor_is_active)
VALUES (?, ?, TRUE)
ON DUPLICATE KEY UPDATE 
    two_factor_email = ?, 
    two_factor_updated_at = NOW()
`

type AddOrUpdateEmailParams struct {
	UserID           uint32
	TwoFactorEmail   sql.NullString
	TwoFactorEmail_2 sql.NullString
}

// AddOrUpdateEmail
func (q *Queries) AddOrUpdateEmail(ctx context.Context, arg AddOrUpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdateEmail, arg.UserID, arg.TwoFactorEmail, arg.TwoFactorEmail_2)
	return err
}

const addOrUpdatePhoneNumber = `-- name: AddOrUpdatePhoneNumber :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (user_id, two_factor_phone, two_factor_is_active)
VALUES (?, ?, TRUE)
ON DUPLICATE KEY UPDATE 
    two_factor_phone = ?, 
    two_factor_updated_at = NOW()
`

type AddOrUpdatePhoneNumberParams struct {
	UserID           uint32
	TwoFactorPhone   sql.NullString
	TwoFactorPhone_2 sql.NullString
}

// AddOrUpdatePhoneNumber
func (q *Queries) AddOrUpdatePhoneNumber(ctx context.Context, arg AddOrUpdatePhoneNumberParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdatePhoneNumber, arg.UserID, arg.TwoFactorPhone, arg.TwoFactorPhone_2)
	return err
}

const countActiveTwoFactorMethods = `-- name: CountActiveTwoFactorMethods :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_is_active = TRUE
`

// CountActiveTwoFactorMethods
func (q *Queries) CountActiveTwoFactorMethods(ctx context.Context, userID uint32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveTwoFactorMethods, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const disableTwoFactor = `-- name: DisableTwoFactor :exec
UPDATE pre_go_acc_user_two_factor_9999
SET two_factor_is_active = FALSE, 
    two_factor_updated_at = NOW()
WHERE user_id = ? AND two_factor_auth_type = ?
`

type DisableTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// DisableTwoFactor
func (q *Queries) DisableTwoFactor(ctx context.Context, arg DisableTwoFactorParams) error {
	_, err := q.db.ExecContext(ctx, disableTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const enableTwoFactorTypeEmail = `-- name: EnableTwoFactorTypeEmail :exec

INSERT INTO pre_go_acc_user_two_factor_9999 (user_id, two_factor_auth_type, two_factor_email, two_factor_auth_secret, two_factor_is_active, two_factor_created_at, two_factor_updated_at)
VALUES (?, ?, ?, "OTP", FALSE, NOW(), NOW())
`

type EnableTwoFactorTypeEmailParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
	TwoFactorEmail    sql.NullString
}

// file: 0004_pre_go_acc_user_two_factor_9999.sql
// EnableTwoFactor
func (q *Queries) EnableTwoFactorTypeEmail(ctx context.Context, arg EnableTwoFactorTypeEmailParams) error {
	_, err := q.db.ExecContext(ctx, enableTwoFactorTypeEmail, arg.UserID, arg.TwoFactorAuthType, arg.TwoFactorEmail)
	return err
}

const getTwoFactorMethodByID = `-- name: GetTwoFactorMethodByID :one
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, 
       two_factor_phone, two_factor_email, 
       two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE two_factor_id = ?
`

// GetTwoFactorMethodByID
func (q *Queries) GetTwoFactorMethodByID(ctx context.Context, twoFactorID uint32) (PreGoAccUserTwoFactor9999, error) {
	row := q.db.QueryRowContext(ctx, getTwoFactorMethodByID, twoFactorID)
	var i PreGoAccUserTwoFactor9999
	err := row.Scan(
		&i.TwoFactorID,
		&i.UserID,
		&i.TwoFactorAuthType,
		&i.TwoFactorAuthSecret,
		&i.TwoFactorPhone,
		&i.TwoFactorEmail,
		&i.TwoFactorIsActive,
		&i.TwoFactorCreatedAt,
		&i.TwoFactorUpdatedAt,
	)
	return i, err
}

const getTwoFactorMethodByIDAndType = `-- name: GetTwoFactorMethodByIDAndType :one
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, 
       two_factor_phone, two_factor_email, 
       two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ?
`

type GetTwoFactorMethodByIDAndTypeParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// GetTwoFactorMethodByIDAndType: select lay email de sen otp
func (q *Queries) GetTwoFactorMethodByIDAndType(ctx context.Context, arg GetTwoFactorMethodByIDAndTypeParams) (PreGoAccUserTwoFactor9999, error) {
	row := q.db.QueryRowContext(ctx, getTwoFactorMethodByIDAndType, arg.UserID, arg.TwoFactorAuthType)
	var i PreGoAccUserTwoFactor9999
	err := row.Scan(
		&i.TwoFactorID,
		&i.UserID,
		&i.TwoFactorAuthType,
		&i.TwoFactorAuthSecret,
		&i.TwoFactorPhone,
		&i.TwoFactorEmail,
		&i.TwoFactorIsActive,
		&i.TwoFactorCreatedAt,
		&i.TwoFactorUpdatedAt,
	)
	return i, err
}

const getTwoFactorStatus = `-- name: GetTwoFactorStatus :one
SELECT two_factor_is_active
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ?
`

type GetTwoFactorStatusParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// GetTwoFactorStatus
func (q *Queries) GetTwoFactorStatus(ctx context.Context, arg GetTwoFactorStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getTwoFactorStatus, arg.UserID, arg.TwoFactorAuthType)
	var two_factor_is_active bool
	err := row.Scan(&two_factor_is_active)
	return two_factor_is_active, err
}

const getUserTwoFactorMethods = `-- name: GetUserTwoFactorMethods :many
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, 
       two_factor_phone, two_factor_email, 
       two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ?
`

// GetUserTwoFactorMethods
func (q *Queries) GetUserTwoFactorMethods(ctx context.Context, userID uint32) ([]PreGoAccUserTwoFactor9999, error) {
	rows, err := q.db.QueryContext(ctx, getUserTwoFactorMethods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoAccUserTwoFactor9999
	for rows.Next() {
		var i PreGoAccUserTwoFactor9999
		if err := rows.Scan(
			&i.TwoFactorID,
			&i.UserID,
			&i.TwoFactorAuthType,
			&i.TwoFactorAuthSecret,
			&i.TwoFactorPhone,
			&i.TwoFactorEmail,
			&i.TwoFactorIsActive,
			&i.TwoFactorCreatedAt,
			&i.TwoFactorUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isTwoFactorEnabled = `-- name: IsTwoFactorEnabled :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_is_active = TRUE
`

// IsTwoFactorEnabled
func (q *Queries) IsTwoFactorEnabled(ctx context.Context, userID uint32) (int64, error) {
	row := q.db.QueryRowContext(ctx, isTwoFactorEnabled, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const reactivateTwoFactor = `-- name: ReactivateTwoFactor :exec
UPDATE pre_go_acc_user_two_factor_9999
SET two_factor_is_active = TRUE, 
    two_factor_updated_at = NOW()
WHERE user_id = ? AND two_factor_auth_type = ?
`

type ReactivateTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// ReactivateTwoFactor
func (q *Queries) ReactivateTwoFactor(ctx context.Context, arg ReactivateTwoFactorParams) error {
	_, err := q.db.ExecContext(ctx, reactivateTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const removeTwoFactor = `-- name: RemoveTwoFactor :exec
DELETE FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ?
`

type RemoveTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// RemoveTwoFactor
func (q *Queries) RemoveTwoFactor(ctx context.Context, arg RemoveTwoFactorParams) error {
	_, err := q.db.ExecContext(ctx, removeTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const updateTwoFactorStatus = `-- name: UpdateTwoFactorStatus :exec
UPDATE pre_go_acc_user_two_factor_9999
SET two_factor_is_active = TRUE, two_factor_updated_at = NOW()
WHERE user_id = ? AND two_factor_auth_type = ? AND two_factor_is_active = FALSE
`

type UpdateTwoFactorStatusParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// UpdateTwoFactorStatusVerification
func (q *Queries) UpdateTwoFactorStatus(ctx context.Context, arg UpdateTwoFactorStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTwoFactorStatus, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const verifyTwoFactor = `-- name: VerifyTwoFactor :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ? AND two_factor_is_active = TRUE
`

type VerifyTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

// VerifyTwoFactor
func (q *Queries) VerifyTwoFactor(ctx context.Context, arg VerifyTwoFactorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, verifyTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	var count int64
	err := row.Scan(&count)
	return count, err
}
